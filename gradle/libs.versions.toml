[versions]
bencode = "1.4.1"
jna = "5.12.1"
kotlin = "2.0.0"
# kotlinx
coroutines = "1.8.1"
serialization = "1.6.3"
datetime = "0.6.0"
atomicfu = "0.23.2"
#
kotlinpoet = "1.16.0"
log4j-core = "2.20.0"
okhttp = "4.12.0"
playwright = "1.44.0"
reorderable = "0.9.6"
ktor = "2.3.10"
koin = "3.5.3"
slf4j = "2.0.12"
jsoup = "1.15.4"
android-gradle-plugin = "8.2.2"
accompanist = "0.34.0"
datastore = "1.1.1"
libtorrent4j = "2.1.0-31"
coil = "3.0.0-alpha06"
mongodb-driver-kotlin-coroutine = "4.10.1"
kompendium = "3.14.4"
logback = "1.4.14"
aws = "2.25.49"
ksp = "2.0.0-1.0.21"
room = "2.7.0-alpha03"
sqlite = "2.5.0-alpha03"
constraintlayout-compose = "0.4.0"
ktor-swagger-ui = "3.2.0"
swagger-core = "2.2.21"


compose-material3 = "1.2.1"

# https://androidx.tech/artifacts/compose.material/material-android/
jetpack-compose = "1.6.7"
# https://github.com/JetBrains/compose-multiplatform/releases
# https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compatibility-and-versioning.html#use-a-developer-version-of-compose-multiplatform-compiler
compose-multiplatform = "1.6.10"
# https://maven.pkg.jetbrains.space/public/p/compose/dev/org/jetbrains/compose/compiler/compiler/
#compose-multiplatform-compiler = "1.5.11-kt-2.0.0-RC1" # used by buildscript, don't remove
vlcj = "4.8.2" # don't change version, otherwise it might crash the vm

[libraries]
# Build
android-gradle-plugin = { module = "com.android.tools.build:gradle", version.ref = "android-gradle-plugin" }
android-library-gradle-plugin = { module = "com.android.library:com.android.library.gradle.plugin", version.ref = "android-gradle-plugin" }
android-application-gradle-plugin = { module = "com.android.application:com.android.application.gradle.plugin", version.ref = "android-gradle-plugin" }
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
atomicfu-gradle-plugin = { module = "org.jetbrains.kotlinx:atomicfu-gradle-plugin", version.ref = "atomicfu" }
compose-multiplatfrom-gradle-plugin = { module = "org.jetbrains.compose:org.jetbrains.compose.gradle.plugin", version.ref = "compose-multiplatform" }
#compose-multiplatfrom-compiler-plugin = { module = "org.jetbrains.compose:org.jetbrains.compose.compiler", version.ref = "compose-multiplatform-compiler" }

# Kotlinx
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "datetime" }
kotlinpoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinpoet" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
kotlinx-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "coroutines" }
kotlinx-coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "atomicfu" }
kotlinx-io-core = { module = "org.jetbrains.kotlinx:kotlinx-io-core", version = "0.3.2" }
#kotlinx-serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "serialization" }

# Ktor
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" }
ktor-server-auto-head-response = { module = "io.ktor:ktor-server-auto-head-response", version.ref = "ktor" }
ktor-server-cio = { module = "io.ktor:ktor-server-cio", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-caching-headers = { module = "io.ktor:ktor-server-caching-headers", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-html-builder = { module = "io.ktor:ktor-server-html-builder", version.ref = "ktor" }
ktor-server-status = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-swagger = { module = "io.ktor:ktor-server-swagger", version.ref = "ktor" }
ktor-swagger-ui = { module = "io.github.smiley4:ktor-swagger-ui", version.ref = "ktor-swagger-ui" }

# Koin
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }
koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }

# Yamlkt
directories = { module = "dev.dirs:directories", version = "26" }

# Logging
log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j-core" }
log4j-slf4j-impl = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version.ref = "log4j-core" }
playwright = { module = "com.microsoft.playwright:playwright", version.ref = "playwright" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
logback-android = { module = "com.github.tony19:logback-android", version = "3.0.0" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# OkHttp
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-logging = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }


# https://github.com/coil-kt/coil
coil = { module = "io.coil-kt.coil3:coil", version.ref = "coil" }
#coil-network-ktor = { module = "io.coil-kt.coil:coil-network-ktor", version.ref = "coil" }
coil-core = { module = "io.coil-kt.coil3:coil-core", version.ref = "coil" }
coil-compose-core = { module = "io.coil-kt.coil3:coil-compose-core", version.ref = "coil" }
coil-svg = { module = "io.coil-kt.coil3:coil-svg", version.ref = "coil" }
#coil-gif = { module = "io.coil-kt.coil3:coil-gif", version.ref = "coil" }
coil-network-okhttp = { module = "io.coil-kt.coil3:coil-network-okhttp", version.ref = "coil" }

# Jsoup - HTML parsing (for dmhy)
jsoup = { module = "org.jsoup:jsoup", version.ref = "jsoup" }

# Torrent
libtorrent4j = { module = "org.libtorrent4j:libtorrent4j", version.ref = "libtorrent4j" }
libtorrent4j-android-arm64 = { module = "org.libtorrent4j:libtorrent4j-android-arm64", version.ref = "libtorrent4j" }
libtorrent4j-macos = { module = "org.libtorrent4j:libtorrent4j-macos", version.ref = "libtorrent4j" }
libtorrent4j-windows = { module = "org.libtorrent4j:libtorrent4j-windows", version.ref = "libtorrent4j" }
libtorrent4j-linux = { module = "org.libtorrent4j:libtorrent4j-linux", version.ref = "libtorrent4j" }

bencode = { module = "com.dampcake:bencode", version.ref = "bencode" }

# Android Datastore
datastore = { module = "androidx.datastore:datastore", version.ref = "datastore" }
datastore-core = { module = "androidx.datastore:datastore-core", version.ref = "datastore" }
datastore-preferences = { module = "androidx.datastore:datastore-preferences", version.ref = "datastore" }
datastore-preferences-core = { module = "androidx.datastore:datastore-preferences-core", version.ref = "datastore" }

# Multi-platform Android Room and implemention
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
androidx-room-paging = { group = "androidx.room", name = "room-paging", version.ref = "room" }
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
sqlite = { module = "androidx.sqlite:sqlite", version.ref = "sqlite" }
sqlite-bundled = { module = "androidx.sqlite:sqlite-bundled", version.ref = "sqlite" }

# Android Accompanist
accompanist-placeholder = { module = "com.google.accompanist:accompanist-placeholder", version.ref = "accompanist" }
accompanist-placeholder-material = { module = "com.google.accompanist:accompanist-placeholder-material", version.ref = "accompanist" }


# Navigation
precompose = { module = "moe.tlaster:precompose", version = "1.5.10" }
precompose-koin = { module = "moe.tlaster:precompose-koin", version = "1.5.10" }
precompose-viewmodel = { module = "moe.tlaster:precompose-viewmodel", version = "1.5.10" }

# Compose Multiplatform
reorderable = { module = "org.burnoutcrew.composereorderable:reorderable", version.ref = "reorderable" }
constraintlayout-compose = { module = "tech.annexflow.compose:constraintlayout-compose-multiplatform", version.ref = "constraintlayout-compose" }

# Android-only libraries
# Each library has its own version, so we don't use `Versions` here.
androidx-core-ktx = { module = "androidx.core:core-ktx", version = "1.13.1" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version = "1.9.0" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version = "1.7.0" }
androidx-swiperefreshlayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version = "1.1.0" }
androidx-material = { module = "com.google.android.material:material", version = "1.12.0" }
androidx-material3-window-size-class0 = { module = "androidx.compose.material3:material3-window-size-class", version = "1.2.1" }
androidx-browser = { module = "androidx.browser:browser", version = "1.8.0" }
androidx-media = { module = "androidx.media:media", version = "1.7.0" }
#androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version = "2.7.6" }
slf4j-android = { module = "uk.uuid.slf4j:slf4j-android", version = "2.0.7-0" }

androidx-media3-ui = { module = "androidx.media3:media3-ui", version = "1.3.1" }
androidx-media3-exoplayer = { module = "androidx.media3:media3-exoplayer", version = "1.3.1" }

androidx-compose-ui = { module = "androidx.compose.ui:ui", version.ref = "jetpack-compose" }
androidx-compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "jetpack-compose" }
androidx-compose-ui-viewbinding = { module = "androidx.compose.ui:ui-viewbinding", version.ref = "jetpack-compose" }
androidx-compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "jetpack-compose" }
androidx-compose-material = { module = "androidx.compose.material:material", version.ref = "jetpack-compose" }
androidx-compose-material3 = { module = "androidx.compose.material3:material3", version.ref = "compose-material3" }
androidx-compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "jetpack-compose" }
# compose-runtime-livedata = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "jetpackCompose" }

# MongoDB
mongodb-driver-kotlin-coroutine = { module = "org.mongodb:mongodb-driver-kotlin-coroutine", version.ref = "mongodb-driver-kotlin-coroutine" }

# Kompendium
kompendium-core = { module = "io.bkbn:kompendium-core", version.ref = "kompendium" }

#javafx-controls = { module = "org.openjfx:javafx-controls", version = "17.0.11", classifier = "mac" }
#javafx-graphics = { module = "org.openjfx:javafx-graphics", version = "17.0.11", classifier = "mac" }

# VLC
# NOTE: YOU WILL NEVER WANT TO CHANGE VLCJ AND JNA VERSIONS.
# ONLY VLC 3.0.18 IS SUPPORTED.
vlcj = { module = "uk.co.caprica:vlcj", version.ref = "vlcj" }
vlcj-javafx = { module = "uk.co.caprica:vlcj-javafx", version = "1.2.0" }
jna = { module = "net.java.dev.jna:jna", version.ref = "jna" }


#// https://mvnrepository.com/artifact/software.amazon.awssdk/s3
#testImplementation("software.amazon.awssdk:s3:2.25.49")

# S3
aws-s3 = { module = "software.amazon.awssdk:s3", version.ref = "aws" }
aws-sts = { module = "software.amazon.awssdk:sts", version.ref = "aws" }
aws-s3control = { module = "software.amazon.awssdk:s3control", version.ref = "aws" }
aws-secretsmanager = { module = "software.amazon.awssdk:secretsmanager", version.ref = "aws" }

#htmlunit = { group = "net.sourceforge.htmlunit", name = "htmlunit", version = "2.70.0" }
selenium-java = { group = "org.seleniumhq.selenium", name = "selenium-java", version = "4.21.0" }
webdrivermanager = { group = "io.github.bonigarcia", name = "webdrivermanager", version = "5.8.0" }

swagger-core = { module = "io.swagger.core.v3:swagger-core", version.ref = "swagger-core" }
